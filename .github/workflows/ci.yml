# .github/workflows/ci.yml

name: CI - 持续集成测试
on:
  pull_request:
    branches:
      - dev
      - main
jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    env:
      DAGSHUB_TRACKING_URI: ${{ secrets.DAGSHUB_TRACKING_URI }}
      DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      DAGSHUB_PASSWORD: ${{ secrets.DAGSHUB_PASSWORD }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[azure] # (我们用 dagsHub, 但包名无所谓)

      - name: 配置 DVC (使用 DagsHub 存储)
        run: |
          # (我们只修改，不添加，因为 .dvc/config 已经在了)
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
          dvc remote modify origin --local password ${{ secrets.DAGSHUB_PASSWORD }}
          dvc remote default origin
          
      - name: DVC 拉取数据 (用于 Pytest 和训练)
        # (我们只拉取一次，供后续所有步骤使用)
        run: |
          dvc pull data/housing.csv.dvc -f

      - name: 运行 Linting (Flake8)
        run: flake8 . --count --show-source --statistics

      - name: 运行单元测试 (Pytest)
        # (这一步现在是安全的，它不会再删除 .dvc 文件了)
        run: pytest

      # --- (这是修复！) ---
      # (已删除) "获取数据(用于训练)" 步骤已被删除，因为它很多余
      # --- (修复结束) ---

      - name: 运行模型训练 (推送到 DagsHub)
        # (这一步会找到 dvc pull 下拉的数据)
        run: python ml/train.py
        
      - name: 创建用于测试的 .env 文件
        run: |
          echo "DAGSHUB_TRACKING_URI=${{ secrets.DAGSHUB_TRACKING_URI }}" >> .env
          echo "DAGSHUB_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> .env
          echo "DAGSHUB_PASSWORD=${{ secrets.DAGSHUB_PASSWORD }}" >> .env
          
      - name: (新增) 测试 Docker 镜像是否能构建
        run: |
          docker build -t my-test-image .
